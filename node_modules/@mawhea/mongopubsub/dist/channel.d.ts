/// <reference types="node" />
import { EventEmitter } from 'events';
import { Db, Document } from 'mongodb';
export interface ChannelOptions {
    name?: string;
    mongoDb: Db;
    size?: number;
    max?: number;
}
export declare class Channel extends EventEmitter {
    closed: boolean;
    private options;
    private listening;
    private name;
    private db;
    private collection;
    private tailableCursor;
    constructor(options: ChannelOptions);
    close(): Channel;
    publish(params: {
        event: string;
        message: any;
    }): Promise<import("mongodb").InsertOneResult<Document>>;
    subscribe({ event, callback }: {
        event?: string;
        callback: (data: any) => void;
    }): {
        unsubscribe: () => void;
    };
    latest(latest: Document): Promise<Document>;
    listen(latest?: Document): Promise<void>;
    private init;
    private ready;
}
