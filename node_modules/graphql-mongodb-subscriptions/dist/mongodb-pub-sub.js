"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongodbPubSub = void 0;
var pubsub_async_iterator_1 = require("./pubsub-async-iterator");
var mongopubsub_1 = require("@mawhea/mongopubsub");
var debug_1 = require("debug");
var debug = (0, debug_1.default)('MongodbPubSub');
var defaultCommonMessageHandler = function (message) {
    debug("MongodbPubSub.defaultCommonMessageHandler()", message);
    return message;
};
var MongodbPubSub = (function () {
    function MongodbPubSub(options) {
        var connectionDb = options.connectionDb, channelName = options.channelName, channelOptions = options.channelOptions, connectionListener = options.connectionListener, commonMessageHandler = options.commonMessageHandler;
        this.subscriptionMap = {};
        this.subsRefsMap = new Map();
        this.currentSubscriptionId = 0;
        this.channelName = channelName;
        this.commonMessageHandler = commonMessageHandler || defaultCommonMessageHandler;
        this.channel = new mongopubsub_1.MubSub(__assign(__assign({ mongoDb: connectionDb }, channelOptions), { name: channelName }));
        if (connectionListener) {
            this.channel.on('error', function (error) {
                connectionListener("error", error);
            });
            this.channel.on("ready", function (data) {
                connectionListener("channel ready", data);
            });
        }
    }
    MongodbPubSub.prototype.publish = function (trigger, payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        debug("MongodbPubSub publish()", { trigger: trigger, payload: payload });
                        return [4, this.channel.publish({ event: trigger, message: payload })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    MongodbPubSub.prototype.subscribe = function (trigger, onMessage, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        debug("MongodbPubSub subscribe()", { trigger: trigger });
        var triggerName = trigger;
        var id = this.currentSubscriptionId++;
        var callback = function (message) {
            debug("MongodbPubSub subscription callback[".concat(id, "]"), message);
            onMessage(message instanceof Error
                ? message
                : _this.commonMessageHandler(message));
        };
        var subscription = this.channel.subscribe({ event: triggerName, callback: callback });
        debug("subscription[".concat(id, "]"), "trigger[".concat(triggerName, "]"));
        this.subscriptionMap[id] = [triggerName, subscription];
        if (!this.subsRefsMap.has(triggerName)) {
            this.subsRefsMap.set(triggerName, new Set());
        }
        var refs = this.subsRefsMap.get(triggerName);
        refs.add(id);
        return Promise.resolve(id);
    };
    MongodbPubSub.prototype.unsubscribe = function (subId) {
        debug("MongodbPubSub.unsubscribe()", "subId[".concat(subId, "]"));
        debug("MongodbPubSub subscriptionMap", this.subscriptionMap);
        var _a = this.subscriptionMap[subId] || [], _b = _a[0], triggerName = _b === void 0 ? null : _b, subscription = _a[1];
        var refs = this.subsRefsMap.get(triggerName);
        if (!subscription) {
            throw new Error("There is no subscription of id \"".concat(subId, "\""));
        }
        subscription.unsubscribe(triggerName);
        if (refs.size === 1) {
            this.subsRefsMap.delete(triggerName);
        }
        else {
            refs.delete(subId);
        }
        delete this.subscriptionMap[subId];
    };
    MongodbPubSub.prototype.asyncIterator = function (triggers, options) {
        return new pubsub_async_iterator_1.PubSubAsyncIterator(this, triggers, options);
    };
    MongodbPubSub.prototype.close = function () {
        this.channel.close();
    };
    return MongodbPubSub;
}());
exports.MongodbPubSub = MongodbPubSub;
//# sourceMappingURL=mongodb-pub-sub.js.map