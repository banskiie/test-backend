import { PubSubEngine } from 'graphql-subscriptions';
import { Db } from 'mongodb';
type OnMessage<T> = (message: T) => void;
export type CommonMessageHandler = (message: any) => any;
export interface MongoPubSubChannelOptions {
    size: number;
    max: number;
}
export interface PubSubMongoDbOptions {
    connectionDb: Db;
    channelName?: string;
    channelOptions?: MongoPubSubChannelOptions;
    connectionListener?: (event: string, data: any) => void;
    commonMessageHandler?: CommonMessageHandler;
}
export declare class MongodbPubSub implements PubSubEngine {
    private channelName;
    private channel;
    private commonMessageHandler;
    private readonly subscriptionMap;
    private readonly subsRefsMap;
    private currentSubscriptionId;
    constructor(options: PubSubMongoDbOptions);
    publish<T>(trigger: string, payload: T): Promise<void>;
    subscribe<T = any>(trigger: string, onMessage: OnMessage<T>, options?: unknown): Promise<number>;
    unsubscribe(subId: number): void;
    asyncIterator<T>(triggers: string | string[], options?: unknown): AsyncIterator<T>;
    close(): void;
}
export {};
