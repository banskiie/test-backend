"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Channel = void 0;
var events_1 = require("events");
var Channel = (function (_super) {
    __extends(Channel, _super);
    function Channel(options) {
        var _this = _super.call(this) || this;
        console.log("new Channel()", {
            options: options
        });
        _this.db = options.mongoDb;
        _this.options = {
            capped: true,
            size: options.size || 100000,
            max: options.max
        };
        console.log("this.options", _this.options);
        _this.closed = false;
        _this.listening = null;
        _this.name = options.name || 'mubsub';
        _this.setMaxListeners(Infinity);
        _this.listen().then(function () { return console.log("Channel.constructor() listen()", "now listening to pubsub collection"); });
        return _this;
    }
    Channel.prototype.close = function () {
        this.closed = true;
        this.tailableCursor.destroy();
        return this;
    };
    Channel.prototype.publish = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                console.log("Channel publish()", params);
                return [2, this.collection.insertOne(params)];
            });
        });
    };
    Channel.prototype.subscribe = function (_a) {
        var _this = this;
        var _b = _a.event, event = _b === void 0 ? 'message' : _b, callback = _a.callback;
        console.log("Channel.subscribe()", { event: event });
        this.on(event, callback);
        return {
            unsubscribe: function () {
                _this.removeListener(event, callback);
            }
        };
    };
    Channel.prototype.latest = function (latest) {
        return __awaiter(this, void 0, void 0, function () {
            var doc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Channel.latest()", {
                            collection: !!this.collection,
                            latest: latest
                        });
                        return [4, this.collection
                                .find(latest ? { _id: latest._id } : {})
                                .sort({ $natural: -1 })
                                .limit(1)
                                .next()];
                    case 1:
                        doc = _a.sent();
                        console.log("Channel.latest() doc", doc);
                        if (!!doc) return [3, 3];
                        console.log("Channel.latest() no documents found", "initializing collection");
                        doc = { type: 'init' };
                        return [4, this.collection.insertOne(doc)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2, doc];
                }
            });
        });
    };
    Channel.prototype.listen = function (latest) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Channel.listen()");
                        if (!!this.collection) return [3, 2];
                        return [4, this.init()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4, this.latest(latest)];
                    case 3:
                        latest = _a.sent();
                        console.log("Channel.listen()", "init tailable cursor");
                        this.tailableCursor = this.collection
                            .find({ _id: { $gt: latest._id } }, {
                            tailable: true,
                            awaitData: true,
                            sort: { $natural: 1 }
                        }).stream();
                        this.tailableCursor.on("data", function (doc) {
                            console.log("tailableCursor.on('data')", doc);
                            var event = doc.event, message = doc.message;
                            if (event) {
                                console.log("Channel.listen() emit event", doc);
                                _this.emit(event, message);
                                _this.emit('message', message);
                            }
                        });
                        this.tailableCursor.on("error", function (error) {
                            console.error("tailableCursor.on('error')", error);
                            _this.emit('error', new Error('Mubsub: cursor error.'));
                        });
                        this.tailableCursor.on("end", function () {
                            console.log("tailableCursor.on('end')", "cursor ended");
                            _this.emit('error', new Error('Mubsub: cursor ended.'));
                        });
                        this.tailableCursor.on("close", function () {
                            console.log("tailableCursor.on('close')", "Cursor closed");
                            _this.emit('error', new Error('Mubsub: cursor closed.'));
                        });
                        this.listening = true;
                        this.emit('ready', this.listening);
                        return [2];
                }
            });
        });
    };
    Channel.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var collections, collection;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Channel.init()", { channelName: this.name });
                        return [4, this.db.collections()];
                    case 1:
                        collections = _a.sent();
                        collection = collections.find(function (c) { return c.collectionName === _this.name; });
                        if (!!collection) return [3, 3];
                        console.log("Channel.init() Creating pubsub collection", {
                            name: this.name,
                            options: this.options
                        });
                        return [4, this.db.createCollection(this.name, this.options)];
                    case 2:
                        collection = _a.sent();
                        console.log("Channel.init()", "Successfully created pubsub collection");
                        return [3, 4];
                    case 3:
                        console.log("Channel.init()", "".concat(this.name, " collection already exists"));
                        _a.label = 4;
                    case 4:
                        this.collection = collection;
                        this.emit('collection', this.collection);
                        return [2, collection];
                }
            });
        });
    };
    Channel.prototype.ready = function (callback) {
        console.log("Channel.ready()", { listening: !!this.listening });
        if (this.listening) {
            callback();
        }
        else {
            this.once('ready', callback);
        }
    };
    return Channel;
}(events_1.EventEmitter));
exports.Channel = Channel;
//# sourceMappingURL=channel.js.map